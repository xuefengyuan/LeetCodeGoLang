package main

import "fmt"

// 36.有效的数独
// 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
//
// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
//
// 注意：
//
// 一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。
// 空白格用 '.' 表示。
func main() {
	board := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}
	fmt.Println(isValidSudoku(board))

	board = [][]byte{
		{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'5', '.', '.', '.', '.', '.', '.', '9', '.'},
		{'.', '.', '.', '5', '6', '.', '.', '.', '.'},
		{'4', '.', '3', '.', '.', '.', '.', '.', '1'},
		{'.', '.', '.', '7', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '5', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
	}
	fmt.Println(isValidSudoku(board))
}

func isValidSudoku(board [][]byte) bool {
	// 初始化哈希表：行、列、子宫格
	// 9行
	rows := make([]map[byte]bool, 9)
	// 9列
	cols := make([]map[byte]bool, 9)
	// 9个3x3子宫格
	boxes := make([]map[byte]bool, 9)

	for i := 0; i < 9; i++ {
		// 每行一个map
		rows[i] = make(map[byte]bool)
		// 每列一个map
		cols[i] = make(map[byte]bool)
		// 每个子宫格一个map
		boxes[i] = make(map[byte]bool)
	}

	// 单次遍历棋盘
	for i := 0; i < 9; i++ {
		// 再遍历棋盘中的每一行
		for j := 0; j < 9; j++ {
			// 当前格子的值
			num := board[i][j]
			// 当前格式里面的是空格子就跳过，进入下一个循环
			if num == '.' {
				continue
			}
			// 检查行，下标是外层循环的下标，数字是不是在当前行中出现，如果在当前行出现，返回false
			if rows[i][num] {
				return false
			}
			// 标记在当前行出现过的数字
			rows[i][num] = true

			// 检查列，下标是内层循环的下标，如果数字在当前列出现过，返回fase
			if cols[j][num] {
				return false
			}
			// 标记在当前列出现过的数字
			cols[j][num] = true

			// 检查3*3的子宫格，先计算子宫格的下标
			boxIndex := (i/3)*3 + j/3
			// 检查数字是否在子宫格出现过，如果出现过就返回false
			if boxes[boxIndex][num] {
				return false
			}
			// 标记在子宫格出现过的数字
			boxes[boxIndex][num] = true
		}
	}
	return true
}
